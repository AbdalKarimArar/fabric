// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc.proto

package grpcmocks

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	common "github.com/hyperledger/fabric/protos/common"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Transaction struct {
	Creator              []byte   `protobuf:"bytes,1,opt,name=Creator,json=creator,proto3" json:"Creator,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=Data,json=data,proto3" json:"Data,omitempty"`
	Signature            []byte   `protobuf:"bytes,3,opt,name=Signature,json=signature,proto3" json:"Signature,omitempty"`
	ChainID              string   `protobuf:"bytes,4,opt,name=ChainID,json=chainID,proto3" json:"ChainID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{0}
}

func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transaction.Unmarshal(m, b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return xxx_messageInfo_Transaction.Size(m)
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetCreator() []byte {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *Transaction) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Transaction) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Transaction) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

type Result struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{1}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

type CompareMessage struct {
	ChannelHdr           []byte   `protobuf:"bytes,1,opt,name=ChannelHdr,json=channelHdr,proto3" json:"ChannelHdr,omitempty"`
	ActionHdr            []byte   `protobuf:"bytes,2,opt,name=ActionHdr,json=actionHdr,proto3" json:"ActionHdr,omitempty"`
	ProposalPayload      []byte   `protobuf:"bytes,3,opt,name=ProposalPayload,json=proposalPayload,proto3" json:"ProposalPayload,omitempty"`
	ProposalHash         []byte   `protobuf:"bytes,4,opt,name=ProposalHash,json=proposalHash,proto3" json:"ProposalHash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CompareMessage) Reset()         { *m = CompareMessage{} }
func (m *CompareMessage) String() string { return proto.CompactTextString(m) }
func (*CompareMessage) ProtoMessage()    {}
func (*CompareMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{2}
}

func (m *CompareMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CompareMessage.Unmarshal(m, b)
}
func (m *CompareMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CompareMessage.Marshal(b, m, deterministic)
}
func (m *CompareMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompareMessage.Merge(m, src)
}
func (m *CompareMessage) XXX_Size() int {
	return xxx_messageInfo_CompareMessage.Size(m)
}
func (m *CompareMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_CompareMessage.DiscardUnknown(m)
}

var xxx_messageInfo_CompareMessage proto.InternalMessageInfo

func (m *CompareMessage) GetChannelHdr() []byte {
	if m != nil {
		return m.ChannelHdr
	}
	return nil
}

func (m *CompareMessage) GetActionHdr() []byte {
	if m != nil {
		return m.ActionHdr
	}
	return nil
}

func (m *CompareMessage) GetProposalPayload() []byte {
	if m != nil {
		return m.ProposalPayload
	}
	return nil
}

func (m *CompareMessage) GetProposalHash() []byte {
	if m != nil {
		return m.ProposalHash
	}
	return nil
}

type Envelopes struct {
	Envs                 [][]byte `protobuf:"bytes,1,rep,name=Envs,json=envs,proto3" json:"Envs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Envelopes) Reset()         { *m = Envelopes{} }
func (m *Envelopes) String() string { return proto.CompactTextString(m) }
func (*Envelopes) ProtoMessage()    {}
func (*Envelopes) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{3}
}

func (m *Envelopes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Envelopes.Unmarshal(m, b)
}
func (m *Envelopes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Envelopes.Marshal(b, m, deterministic)
}
func (m *Envelopes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Envelopes.Merge(m, src)
}
func (m *Envelopes) XXX_Size() int {
	return xxx_messageInfo_Envelopes.Size(m)
}
func (m *Envelopes) XXX_DiscardUnknown() {
	xxx_messageInfo_Envelopes.DiscardUnknown(m)
}

var xxx_messageInfo_Envelopes proto.InternalMessageInfo

func (m *Envelopes) GetEnvs() [][]byte {
	if m != nil {
		return m.Envs
	}
	return nil
}

func init() {
	proto.RegisterType((*Transaction)(nil), "grpcmocks.Transaction")
	proto.RegisterType((*Result)(nil), "grpcmocks.Result")
	proto.RegisterType((*CompareMessage)(nil), "grpcmocks.CompareMessage")
	proto.RegisterType((*Envelopes)(nil), "grpcmocks.Envelopes")
}

func init() { proto.RegisterFile("grpc.proto", fileDescriptor_bedfbfc9b54e5600) }

var fileDescriptor_bedfbfc9b54e5600 = []byte{
	// 351 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xcf, 0x4b, 0xeb, 0x40,
	0x10, 0xc7, 0x5f, 0x5e, 0xfb, 0x92, 0x97, 0x69, 0xde, 0x2b, 0xee, 0x41, 0x62, 0x11, 0x2d, 0x39,
	0x15, 0x84, 0x08, 0x15, 0xbd, 0x79, 0xd0, 0xb4, 0x50, 0x0f, 0x42, 0x49, 0xc5, 0xfb, 0xb8, 0x5d,
	0xdb, 0xd0, 0x64, 0x77, 0xd9, 0xdd, 0x16, 0x7a, 0xf1, 0x2f, 0xf1, 0x8f, 0x95, 0xcd, 0x8f, 0x92,
	0x42, 0x4f, 0xd9, 0xf9, 0xcc, 0x4c, 0xe6, 0x3b, 0xdf, 0x01, 0x58, 0x29, 0x49, 0x63, 0xa9, 0x84,
	0x11, 0xc4, 0xb7, 0xef, 0x42, 0xd0, 0x8d, 0x1e, 0x0c, 0x4a, 0xa2, 0x6f, 0xa9, 0x28, 0x0a, 0xc1,
	0xeb, 0x4f, 0x55, 0x16, 0x69, 0xe8, 0xbd, 0x29, 0xe4, 0x1a, 0xa9, 0xc9, 0x04, 0x27, 0x21, 0x78,
	0x89, 0x62, 0x68, 0x84, 0x0a, 0x9d, 0xa1, 0x33, 0x0a, 0x52, 0x8f, 0x56, 0x21, 0x21, 0xd0, 0x9d,
	0xa0, 0xc1, 0xf0, 0x77, 0x89, 0xbb, 0x4b, 0x34, 0x48, 0x2e, 0xc1, 0x5f, 0x64, 0x2b, 0x8e, 0x66,
	0xab, 0x58, 0xd8, 0x29, 0x13, 0xbe, 0x6e, 0x40, 0xf9, 0xaf, 0x35, 0x66, 0xfc, 0x65, 0x12, 0x76,
	0x87, 0xce, 0xc8, 0x4f, 0x3d, 0x5a, 0x85, 0xd1, 0x5f, 0x70, 0x53, 0xa6, 0xb7, 0xb9, 0x89, 0xbe,
	0x1d, 0xf8, 0x9f, 0x88, 0x42, 0xa2, 0x62, 0xaf, 0x4c, 0x6b, 0x5c, 0x31, 0x72, 0x05, 0x90, 0xac,
	0x91, 0x73, 0x96, 0xcf, 0x96, 0x8d, 0x0a, 0xa0, 0x07, 0x62, 0x87, 0x3e, 0x95, 0x62, 0x6d, 0xba,
	0x52, 0xe3, 0x63, 0x03, 0xc8, 0x08, 0xfa, 0x73, 0x25, 0xa4, 0xd0, 0x98, 0xcf, 0x71, 0x9f, 0x0b,
	0x5c, 0xd6, 0xc2, 0xfa, 0xf2, 0x18, 0x93, 0x08, 0x82, 0xa6, 0x72, 0x86, 0x7a, 0x5d, 0x6a, 0x0c,
	0xd2, 0x40, 0xb6, 0x58, 0x74, 0x0d, 0xfe, 0x94, 0xef, 0x58, 0x2e, 0x24, 0xd3, 0xd6, 0x81, 0x29,
	0xdf, 0xe9, 0xd0, 0x19, 0x76, 0xac, 0x03, 0x8c, 0xef, 0xf4, 0xf8, 0x0b, 0xdc, 0x44, 0xed, 0xa5,
	0x11, 0xe4, 0x1e, 0xdc, 0x77, 0xa6, 0xb2, 0xcf, 0x3d, 0x39, 0x8f, 0x0f, 0xd6, 0xc7, 0x2d, 0x6f,
	0x07, 0x67, 0x2d, 0x5e, 0xaf, 0xff, 0x8b, 0x3c, 0x42, 0xaf, 0xde, 0xdf, 0x0e, 0x24, 0x17, 0xad,
	0x9a, 0x63, 0x5f, 0x4e, 0xb6, 0x8f, 0x1f, 0xc0, 0x5b, 0x18, 0xa1, 0xac, 0x6f, 0x37, 0xf0, 0xc7,
	0x3e, 0x19, 0xf9, 0x17, 0xd7, 0x17, 0x7e, 0xce, 0x05, 0xdd, 0x9c, 0xec, 0xfb, 0x70, 0xcb, 0xeb,
	0xdf, 0xfd, 0x04, 0x00, 0x00, 0xff, 0xff, 0x40, 0x61, 0x11, 0x85, 0x32, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CryptoClient is the client API for Crypto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CryptoClient interface {
	Verify(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Result, error)
	CompareHash(ctx context.Context, in *CompareMessage, opts ...grpc.CallOption) (*Result, error)
}

type cryptoClient struct {
	cc *grpc.ClientConn
}

func NewCryptoClient(cc *grpc.ClientConn) CryptoClient {
	return &cryptoClient{cc}
}

func (c *cryptoClient) Verify(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/grpcmocks.Crypto/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoClient) CompareHash(ctx context.Context, in *CompareMessage, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/grpcmocks.Crypto/CompareHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CryptoServer is the server API for Crypto service.
type CryptoServer interface {
	Verify(context.Context, *Transaction) (*Result, error)
	CompareHash(context.Context, *CompareMessage) (*Result, error)
}

func RegisterCryptoServer(s *grpc.Server, srv CryptoServer) {
	s.RegisterService(&_Crypto_serviceDesc, srv)
}

func _Crypto_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcmocks.Crypto/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServer).Verify(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crypto_CompareHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompareMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServer).CompareHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcmocks.Crypto/CompareHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServer).CompareHash(ctx, req.(*CompareMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Crypto_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcmocks.Crypto",
	HandlerType: (*CryptoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Verify",
			Handler:    _Crypto_Verify_Handler,
		},
		{
			MethodName: "CompareHash",
			Handler:    _Crypto_CompareHash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}

// StorageClient is the client API for Storage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StorageClient interface {
	Store(ctx context.Context, in *common.Block, opts ...grpc.CallOption) (*Result, error)
}

type storageClient struct {
	cc *grpc.ClientConn
}

func NewStorageClient(cc *grpc.ClientConn) StorageClient {
	return &storageClient{cc}
}

func (c *storageClient) Store(ctx context.Context, in *common.Block, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/grpcmocks.Storage/Store", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServer is the server API for Storage service.
type StorageServer interface {
	Store(context.Context, *common.Block) (*Result, error)
}

func RegisterStorageServer(s *grpc.Server, srv StorageServer) {
	s.RegisterService(&_Storage_serviceDesc, srv)
}

func _Storage_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Block)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcmocks.Storage/Store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).Store(ctx, req.(*common.Block))
	}
	return interceptor(ctx, in, info, handler)
}

var _Storage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcmocks.Storage",
	HandlerType: (*StorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Store",
			Handler:    _Storage_Store_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}
